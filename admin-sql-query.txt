-- Admin Dashboard Queries
-- ==================

-- 1. Get dashboard statistics (total tools, active tools, prices)
SELECT 
  COUNT(*) as total,
  SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active,
  MAX(price_per_day) as highest_price,
  AVG(price_per_day) as average_price
FROM tools;

-- 2. Get top tool categories
SELECT 
  SPLIT_PART(name, ' ', -1) as category,
  COUNT(*) as count
FROM tools
GROUP BY SPLIT_PART(name, ' ', -1)
ORDER BY count DESC
LIMIT 5;

-- 3. Get recent tools with owner details
SELECT 
  t.id, 
  t.name, 
  t.price_per_day, 
  u.username as owner_name, 
  t.created_at
FROM tools t
JOIN users u ON t.owner_id = u.id
WHERE t.status = 'active'
ORDER BY t.created_at DESC
LIMIT 5;

-- Approve Page Queries
-- ==================

-- 1. Get all tools pending approval
SELECT 
  t.id,
  t.name,
  t.price_per_day,
  t.image_url,
  t.owner_id,
  u.username as owner_name,
  t.description,
  t.status,
  t.created_at
FROM tools t
JOIN users u ON t.owner_id = u.id
WHERE t.status = 'pending'
ORDER BY t.created_at DESC;

-- 2. Update tool status (for approve/disapprove)
-- Version with placeholders (for application code):
UPDATE tools
SET status = $1  -- 'active' for approve, 'inactive' for disapprove
WHERE id = $2
RETURNING *;

-- Version for direct psql use (example):
UPDATE tools
SET status = 'active'  -- or 'inactive' for disapprove
WHERE id = 1  -- replace with actual tool ID
RETURNING *;

-- Accepting Request Page Queries
-- ==================

-- 1. Get all support requests
SELECT 
  sr.id,
  sr.type,
  sr.message,
  sr.status,
  sr.created_at,
  sr.name,
  sr.email,
  sr.phone,
  sr.address
FROM support_requests sr
ORDER BY sr.created_at DESC;

-- 2. Update support request status
-- Version with placeholders (for application code):
UPDATE support_requests
SET status = $1  -- 'finished' for approve, 'rejected' for reject
WHERE id = $2
RETURNING *;

-- Version for direct psql use (example):
UPDATE support_requests
SET status = 'finished'  -- or 'rejected' for reject
WHERE id = 1  -- replace with actual request ID
RETURNING *;

-- Additional Useful Queries
-- ==================

-- 1. Get tools with full details
SELECT 
  t.*,
  u.username as owner_name,
  COUNT(r.id) as rental_count
FROM tools t
LEFT JOIN users u ON t.owner_id = u.id
LEFT JOIN rentals r ON t.id = r.tool_id
GROUP BY t.id, u.username;

-- 2. Get support requests with user details (if user is logged in)
SELECT 
  sr.*,
  u.username,
  u.email as user_email
FROM support_requests sr
LEFT JOIN users u ON sr.user_id = u.id
ORDER BY sr.created_at DESC;

-- 3. Get rental statistics for tools
SELECT 
  t.id,
  t.name,
  COUNT(r.id) as total_rentals,
  SUM(r.total_price) as total_revenue,
  AVG(r.total_price) as average_revenue
FROM tools t
LEFT JOIN rentals r ON t.id = r.tool_id
GROUP BY t.id, t.name;

-- Examples of using UPDATE queries:
-- ===============================
-- 1. Approve a tool (ID = 1):
UPDATE tools SET status = 'active' WHERE id = 1 RETURNING *;

-- 2. Disapprove a tool (ID = 2):
UPDATE tools SET status = 'inactive' WHERE id = 2 RETURNING *;

-- 3. Approve a support request (ID = 1):
UPDATE support_requests SET status = 'finished' WHERE id = 1 RETURNING *;

-- 4. Reject a support request (ID = 2):
UPDATE support_requests SET status = 'rejected' WHERE id = 2 RETURNING *;
